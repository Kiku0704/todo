"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Highlighter } from "lucide-react"

interface TextHighlighterProps {
  value: string
  onChange: (value: string) => void
  placeholder?: string
  className?: string
}

// Highlight colors
const highlightColors = [
  { name: "Yellow", class: "bg-yellow-200" },
  { name: "Green", class: "bg-green-200" },
  { name: "Blue", class: "bg-blue-200" },
  { name: "Pink", class: "bg-pink-200" },
  { name: "Purple", class: "bg-purple-200" },
  { name: "Orange", class: "bg-orange-200" },
]

export default function TextHighlighter({ value, onChange, placeholder, className = "" }: TextHighlighterProps) {
  const editorRef = useRef<HTMLDivElement>(null)
  const [currentColor, setCurrentColor] = useState(highlightColors[0])

  // Initialize the editor with the current value
  useEffect(() => {
    if (editorRef.current && !editorRef.current.innerHTML.trim() && value) {
      editorRef.current.innerHTML = value
    }
  }, [value])

  // Handle content changes
  const handleInput = () => {
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML)
    }
  }

  // Apply highlight to selected text
  const applyHighlight = (color: (typeof highlightColors)[0]) => {
    if (!editorRef.current) return

    const selection = window.getSelection()
    if (!selection || selection.rangeCount === 0) return

    const range = selection.getRangeAt(0)
    if (range.collapsed) return // No text selected

    // Create a span with the highlight color
    const highlightSpan = document.createElement("span")
    highlightSpan.className = color.class
    highlightSpan.dir = "ltr" // Explicit left-to-right direction

    // Apply the highlight
    range.surroundContents(highlightSpan)

    // Update the content
    handleInput()

    // Maintain focus on the editor
    editorRef.current.focus()
  }

  // Remove highlight from selected text
  const removeHighlight = () => {
    if (!editorRef.current) return

    const selection = window.getSelection()
    if (!selection || selection.rangeCount === 0) return

    const range = selection.getRangeAt(0)

    // Check if selection is inside a highlight span
    let highlightSpan = null
    let node = range.commonAncestorContainer

    // Find the highlight span parent
    while (node && node !== editorRef.current) {
      if (node.nodeType === 1) {
        const element = node as HTMLElement
        if (element.tagName === "SPAN" && element.className.includes("bg-")) {
          highlightSpan = element
          break
        }
      }
      node = node.parentNode
    }

    if (highlightSpan) {
      // Replace the span with its text content
      const parent = highlightSpan.parentNode
      while (highlightSpan.firstChild) {
        parent.insertBefore(highlightSpan.firstChild, highlightSpan)
      }
      parent.removeChild(highlightSpan)

      // Update the content
      handleInput()
    }
  }

  return (
    <div className="relative">
      <div className="flex items-center gap-1 mb-1">
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-8 flex items-center gap-1">
              <Highlighter className="h-4 w-4" />
              <div className={`w-3 h-3 rounded-full ${currentColor.class}`} />
              <span className="text-xs">Markera</span>
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-2">
            <div className="grid grid-cols-3 gap-1">
              {highlightColors.map((color) => (
                <Button
                  key={color.name}
                  variant="outline"
                  size="sm"
                  className={`h-8 ${color.class}`}
                  onClick={() => {
                    setCurrentColor(color)
                    applyHighlight(color)
                  }}
                >
                  {color.name}
                </Button>
              ))}
            </div>
            <Button variant="outline" size="sm" className="w-full mt-1" onClick={removeHighlight}>
              Ta bort markering
            </Button>
          </PopoverContent>
        </Popover>
      </div>

      <div
        ref={editorRef}
        contentEditable
        dir="ltr" // Explicit left-to-right text direction
        className={`w-full min-h-[60px] p-2 rounded-md border border-slate-200 focus:outline-none focus:ring-2 focus:ring-slate-300 resize-y overflow-auto ${className}`}
        onInput={handleInput}
        placeholder={placeholder}
        dangerouslySetInnerHTML={{ __html: value }}
        style={{ textAlign: "left" }} // Force left alignment
      />
    </div>
  )
}
